import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import streamlit as st

# Load the dataset
diabetes_dataset = pd.read_csv('diabetes.csv')

# Display the title and dataset preview in the Streamlit app
st.title("Diabetes Prediction and Data Exploration")
st.write("## Dataset Preview")
st.write(diabetes_dataset.head())

# Data Preparation
X = diabetes_dataset.drop(columns='Outcome', axis=1)  # Features
Y = diabetes_dataset['Outcome']  # Target variable

# Data Standardization
scaler = StandardScaler()
X = scaler.fit_transform(X)  # Standardize the features

# Splitting the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Model Definition
model = tf.keras.Sequential([
    tf.keras.layers.Dense(32, input_shape=(X_train.shape[1],), activation='tanh', name='dense_1'),
    tf.keras.layers.Dense(16, activation='tanh', name='dense_2'),
    tf.keras.layers.Dense(1, activation='sigmoid', name='output')
])

# Compile the model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Training the model
model.fit(X_train, Y_train, epochs=30, batch_size=20, validation_split=0.1, verbose=1)

# Streamlit Interface for Prediction
st.write("## Make a New Prediction")
st.write("Enter the following details to predict whether the person is diabetic:")

# Input fields for prediction
pregnancies = st.number_input("Number of Pregnancies", min_value=0, max_value=20, value=0)
glucose = st.number_input("Glucose Level", min_value=0, max_value=200, value=0)
blood_pressure = st.number_input("Blood Pressure", min_value=0, max_value=150, value=0)
skin_thickness = st.number_input("Skin Thickness", min_value=0, max_value=100, value=0)
insulin = st.number_input("Insulin Level", min_value=0, max_value=900, value=0)
bmi = st.number_input("BMI", min_value=0.0, max_value=70.0, value=0.0)
dpf = st.number_input("Diabetes Pedigree Function", min_value=0.0, max_value=3.0, value=0.0)
age = st.number_input("Age", min_value=0, max_value=120, value=0)

# Model Evaluation
st.write("## Model Performance")
train_loss, train_accuracy = model.evaluate(X_train, Y_train, verbose=0)
st.write(f"### Training Accuracy: {train_accuracy:.4f}")
test_loss, test_accuracy = model.evaluate(X_test, Y_test, verbose=0)
st.write(f"### Test Accuracy: {test_accuracy:.4f}")

# Making Predictions
if st.button("Predict"):
    input_data = np.array([pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, dpf, age])
    input_data_reshaped = input_data.reshape(1, -1)  # Reshape to 2D array for prediction
    std_data = scaler.transform(input_data_reshaped)  # Standardize input data
    prediction = model.predict(std_data)  # Get model prediction
    prediction_prob = prediction[0][0]

    if prediction_prob > 0.5:
        st.write(f"### Prediction: The person is diabetic (Probability: {prediction_prob:.4f})")
    else:
        st.write(f"### Prediction: The person is not diabetic (Probability: {prediction_prob:.4f})")
